// Code generated by scale-signature , DO NOT EDIT.
// output: signature

package signature

import (
	"github.com/loopholelabs/polyglot"
	"github.com/loopholelabs/scale/signature"
)

const hash = "894b6407df03f83d2f8a2573ae8547278619477f464970644d20b6989103e9fd"

var _ signature.Signature = (*Signature)(nil)

// sig is the host representation of the signature
//
// Users should not use this type directly, but instead pass the Signature() function
// to the Scale Runtime
type Signature struct {
	Context *Context
	buf     *polyglot.Buffer
}

// New returns a new signature and tells the Scale Runtime how to use it
//
// This function should be passed into the scale runtime as an argument
func New() *Signature {
	return &Signature{
		Context: NewContext(),
		buf:     polyglot.NewBuffer(),
	}
}

// Read reads the context from the given byte slice and returns an error if one occurred
//
// This method is meant to be used by the Scale Runtime to deserialize the Signature
func (x *Signature) Read(b []byte) error {
	var err error
	x.Context, err = DecodeContext(x.Context, b)
	return err
}

// Write writes the signature into a byte slice and returns it
func (x *Signature) Write() []byte {
	x.buf.Reset()
	x.Context.Encode(x.buf)
	return x.buf.Bytes()
}

// Error writes the signature into a byte slice and returns it
func (x *Signature) Error(err error) []byte {
	x.buf.Reset()
	polyglot.Encoder(x.buf).Error(err)
	return x.buf.Bytes()
}

// Hash returns the hash of the signature
func (x *Signature) Hash() string {
	return hash
}
