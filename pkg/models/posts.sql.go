// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: posts.sql

package models

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
insert into posts (
        did,
        rkey,
        created_at,
        text,
        reply,
        langs,
        likes
    )
values ($1, $2, $3, $4, $5, $6, 0)
returning did, rkey, created_at, text, reply, langs, likes
`

type CreatePostParams struct {
	Did       string
	Rkey      string
	CreatedAt time.Time
	Text      string
	Reply     bool
	Langs     []string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Did,
		arg.Rkey,
		arg.CreatedAt,
		arg.Text,
		arg.Reply,
		pq.Array(arg.Langs),
	)
	var i Post
	err := row.Scan(
		&i.Did,
		&i.Rkey,
		&i.CreatedAt,
		&i.Text,
		&i.Reply,
		pq.Array(&i.Langs),
		&i.Likes,
	)
	return i, err
}

const likePost = `-- name: LikePost :one
update posts
set likes = likes + 1
where did = $1
    and rkey = $2
returning did, rkey, created_at, text, reply, langs, likes
`

type LikePostParams struct {
	Did  string
	Rkey string
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, likePost, arg.Did, arg.Rkey)
	var i Post
	err := row.Scan(
		&i.Did,
		&i.Rkey,
		&i.CreatedAt,
		&i.Text,
		&i.Reply,
		pq.Array(&i.Langs),
		&i.Likes,
	)
	return i, err
}
