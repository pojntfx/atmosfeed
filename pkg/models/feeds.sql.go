// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: feeds.sql

package models

import (
	"context"
	"time"
)

const createFeedPost = `-- name: CreateFeedPost :exec
insert into feed_posts (
        feed_name,
        post_did,
        post_rkey
    )
values ($1, $2, $3)
`

type CreateFeedPostParams struct {
	FeedName string
	PostDid  string
	PostRkey string
}

func (q *Queries) CreateFeedPost(ctx context.Context, arg CreateFeedPostParams) error {
	_, err := q.db.ExecContext(ctx, createFeedPost, arg.FeedName, arg.PostDid, arg.PostRkey)
	return err
}

const deleteFeed = `-- name: DeleteFeed :exec
delete from feeds
where name = $1
`

func (q *Queries) DeleteFeed(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, name)
	return err
}

const getFeedClassifier = `-- name: GetFeedClassifier :one
select classifier
from feeds
where name = $1
`

func (q *Queries) GetFeedClassifier(ctx context.Context, name string) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, getFeedClassifier, name)
	var classifier []byte
	err := row.Scan(&classifier)
	return classifier, err
}

const getFeedPosts = `-- name: GetFeedPosts :many
select p.did,
    p.rkey
from posts p
    join feed_posts fp on p.did = fp.post_did
    and p.rkey = fp.post_rkey
where fp.feed_name = $1
    and p.created_at > $2
order by p.created_at desc
limit $3
`

type GetFeedPostsParams struct {
	FeedName  string
	CreatedAt time.Time
	Limit     int32
}

type GetFeedPostsRow struct {
	Did  string
	Rkey string
}

func (q *Queries) GetFeedPosts(ctx context.Context, arg GetFeedPostsParams) ([]GetFeedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedPosts, arg.FeedName, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedPostsRow
	for rows.Next() {
		var i GetFeedPostsRow
		if err := rows.Scan(&i.Did, &i.Rkey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedPostsCursor = `-- name: GetFeedPostsCursor :many
with referenceposttime as (
    select created_at
    from posts
    where posts.did = $4
        and posts.rkey = $5
)
select p.did,
    p.rkey
from posts p
    join feed_posts fp on p.did = fp.post_did
    and p.rkey = fp.post_rkey
where fp.feed_name = $1
    and p.created_at > $2
    and p.created_at < (
        select created_at
        from referenceposttime
    )
order by p.created_at desc
limit $3
`

type GetFeedPostsCursorParams struct {
	FeedName  string
	CreatedAt time.Time
	Limit     int32
	Did       string
	Rkey      string
}

type GetFeedPostsCursorRow struct {
	Did  string
	Rkey string
}

func (q *Queries) GetFeedPostsCursor(ctx context.Context, arg GetFeedPostsCursorParams) ([]GetFeedPostsCursorRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedPostsCursor,
		arg.FeedName,
		arg.CreatedAt,
		arg.Limit,
		arg.Did,
		arg.Rkey,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedPostsCursorRow
	for rows.Next() {
		var i GetFeedPostsCursorRow
		if err := rows.Scan(&i.Did, &i.Rkey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeeds = `-- name: GetFeeds :many
select name, classifier
from feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(&i.Name, &i.Classifier); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertFeed = `-- name: UpsertFeed :exec
insert into feeds (name, classifier)
values ($1, $2) on conflict (name) do
update
set classifier = excluded.classifier
`

type UpsertFeedParams struct {
	Name       string
	Classifier []byte
}

func (q *Queries) UpsertFeed(ctx context.Context, arg UpsertFeedParams) error {
	_, err := q.db.ExecContext(ctx, upsertFeed, arg.Name, arg.Classifier)
	return err
}
