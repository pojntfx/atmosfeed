// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: feeds.sql

package models

import (
	"context"
)

const getFeeds = `-- name: GetFeeds :many
select name, classifier
from feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(&i.Name, &i.Classifier); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertFeed = `-- name: UpsertFeed :exec
insert into feeds (name, classifier)
values ($1, $2) on conflict (name) do
update
set classifier = excluded.classifier
`

type UpsertFeedParams struct {
	Name       string
	Classifier []byte
}

func (q *Queries) UpsertFeed(ctx context.Context, arg UpsertFeedParams) error {
	_, err := q.db.ExecContext(ctx, upsertFeed, arg.Name, arg.Classifier)
	return err
}
